<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/tx 
  http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<!--
	Old way of configuring spring transactions  	 
	<bean
		id="aopDAO"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*DAO</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	-->

	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>		

	<!-- 
	A	-	All are committed or none are committed
	C	-	Maintain consistent data , Leave the system in good state
	I	-	Even in a multi-thread application , it maintain a lock so that "parallel" transaction knows that an record is in-progress and wait
	D  	-  	Even when DB is recovered from a crash , the committed transaction during the crash should be saved
	

	ISOLATION LEVEL ("what issue happening in parallel ? ")
	
	=================================================================================================
						|	Dirty Read	| 	Repeatable Read (Update)	|	Phantom Read (Insert)		
	=================================================================================================
	Read Uncommitted	|		-		|			-					|			-				|	=	Read data even if other transaction is in-progress
	Read   committed	|		+		|			-					|			-				|	=	There is "NO" lock on a single/multiple record when u r reading "multiple" time
	Repeatable Read		|		+		|			+					|			-				|	=	There is "NO" lock on a 	   multiple record when u r reading "multiple" time
	Serializable		|		+		|			+					|			+				|	=	There is lock for multiple records when other transaction is in-progress
	
	
	
	Dirty Read
	==========
	system will process for a non exist data if it read a uncommitted data
	eg) system will fail to send a alert mail if the total order for 1 hr is less than 1000 order. 
	because data may get be roll back if there is a communication failure to a payment gateway
	
	Repeatable Read
	===============
	system will fail if it get different value for the same query if it read multiple time in a same transaction.
	

	 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<!-- http://www.ibm.com/developerworks/library/j-isolation/ --> 
				<prop key="select*">PROPAGATION_REQUIRED,ISOLATION_READ_UNCOMMITTED,readOnly</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>				
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>		
	</bean>

	<context:component-scan base-package="com.baseframework.dao" />
	<context:component-scan base-package="com.baseframework.biz" />
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	<tx:advice id="txAdvice" transaction-manager="transactionManager"  >
		<tx:attributes>
	  		<tx:method name="select*" propagation="REQUIRED"  isolation="READ_UNCOMMITTED" read-only="true" />
	  		<tx:method name="insert*" propagation="REQUIRED"  />
	  		<tx:method name="update*" propagation="REQUIRED" />
	  		<tx:method name="delete*" propagation="REQUIRED" />
	  	</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html -->
  		<aop:pointcut id="methods" expression="execution(* com.baseframework.dao..*.*(..))"/>
  		<aop:advisor pointcut-ref="methods"  advice-ref="txAdvice"/>
	</aop:config>

</beans>